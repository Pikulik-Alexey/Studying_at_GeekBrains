# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
from random import randint


n = int(input("Кол-во элементов первого множества: "))
m = int(input("Кол-во элементов второго множества: "))

numbers_1 = [randint(1, 20) for _ in range(n)]
numbers_2 = [randint(1, 20) for _ in range(m)]

numbers_set_1 = set(numbers_1)
numbers_set_2 = set(numbers_2)

comparison = list(numbers_set_1 & numbers_set_2)
comparison_list = comparison.sort()

print(numbers_1)
print(numbers_2)
print(numbers_set_1)
print(numbers_set_2)
print(comparison)


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.


k = int(input("Введите количество кустов: "))
fruit = list(randint(0, 10) for i in range(k))
result_list = []
i = 0
sum = 0

print(fruit)

while (i < k):
    if (i == k - 1):
        sum = fruit[i] + fruit[i - 1] + fruit[0]
    else:
        sum = fruit[i] + fruit[i - 1] + fruit[i + 1]
        result_list.append(sum)
        result_list.sort()
    i += 1

print(result_list)
print(f"Максимальное число ягод за одну итерацию {result_list[-1]}")
